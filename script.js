// Объявляем функцию countFunc, которая принимает матрицу в качестве аргумента
function countFunc(matrix) {
    // Инициализируем переменную count для подсчета четных элементов, начинаем с 0
    let count = 0;
    // Получаем размер матрицы (количество строк или столбцов) и сохраняем в переменной size
    const size = matrix.length;

    // Проверяем главную диагональ
    for (let i = 0; i < size; i++) { // Проходим по всем индексам от 0 до size-1
        // Проверяем, является ли элемент на главной диагонали четным
        if (matrix[i][i] % 2 === 0) { // matrix[i][i] — это элемент главной диагонали
            count++; // Увеличиваем счетчик, если элемент четный
        }
    }

    // Проверяем побочную диагональ
    for (let i = 0; i < size; i++) { // Проходим по всем индексам от 0 до size-1
        // Проверяем, является ли элемент на побочной диагонали четным
        if (matrix[i][size - 1 - i] % 2 === 0) { // matrix[i][size - 1 - i] — это элемент побочной диагонали
            count++; // Увеличиваем счетчик, если элемент четный
        }
    }

    // Если размер матрицы нечетный, то центральный элемент будет учтен дважды
    if (size % 2 === 1) { // Проверяем, является ли размер матрицы нечетным
        // Вычисляем индекс центрального элемента
        const middleIndex = Math.floor(size / 2); // Делаем целочисленное деление
        // Проверяем, является ли центральный элемент четным
        if (matrix[middleIndex][middleIndex] % 2 === 0) { // matrix[middleIndex][middleIndex] — это центральный элемент
            count--; // Уменьшаем счетчик на 1, так как он был учтен дважды
        }
    }

    // Формируем строку для вывода входных данных
    let inputString = "Входные данные:\n"; // Начинаем строку с заголовка
    for (let i = 0; i < size; i++) { // Проходим по всем строкам матрицы
        // Преобразуем каждую строку матрицы в строку и добавляем в inputString
        inputString += matrix[i].join(", ") + "\n"; // join(", ") — соединяет элементы строки через запятую
    }

    // Выводим входные и выходные данные
    alert(inputString); // Показываем входные данные в виде алерта
    alert("Количество четных элементов по диагоналям: " + count); // Показываем количество четных элементов

    // Возвращаем количество четных элементов
    return count;
}

// Объявляем функцию StartF, которая будет запускать пример
function StartF() {
    // Создаем матрицу 3x3 с числами
    const matrix = [
        [2, 2, 2],
        [6, 5, 6],
        [3, 8, 9]
    ];
    // Вызываем функцию countFunc с созданной матрицей
    countFunc(matrix); // Передаем матрицу в функцию для подсчета четных элементов
}
